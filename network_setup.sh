#!/bin/bash

# Network Setup Script pentru Jetson IP Camera Server
# Acest script te ajutƒÉ sƒÉ configurezi accesul online pentru serverul Jetson

echo "üåê === JETSON NETWORK SETUP - ONLINE ACCESS ==="
echo "üéØ Configurare acces online pentru serverul Jetson"
echo ""

# Culori
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# VerificƒÉ informa»õii re»õea
echo -e "${BLUE}üì° Informa»õii re»õea curente:${NC}"

# IP local
LOCAL_IP=$(ip route get 8.8.8.8 | grep -oP 'src \K\S+' 2>/dev/null || hostname -I | awk '{print $1}')
echo "   üè† IP Local: $LOCAL_IP"

# Gateway
GATEWAY=$(ip route | grep default | awk '{print $3}' | head -1)
echo "   üö™ Gateway: $GATEWAY"

# IP public (dacƒÉ e disponibil)
echo "   üåç Verific IP public..."
PUBLIC_IP=$(curl -s --connect-timeout 5 ifconfig.me 2>/dev/null || echo "Nu se poate ob»õine")
echo "   üåç IP Public: $PUBLIC_IP"

# VerificƒÉ porturi deschise
echo ""
echo -e "${BLUE}üîå Verificare porturi:${NC}"

check_port() {
    local port=$1
    local name=$2
    if netstat -tuln | grep -q ":$port "; then
        echo -e "   ‚úÖ Port $port ($name): ${GREEN}DESCHIS${NC}"
    else
        echo -e "   ‚ùå Port $port ($name): ${RED}√éNCHIS${NC}"
    fi
}

check_port 8080 "Flask HTTPS"
check_port 8081 "WebRTC WSS"
check_port 22 "SSH"

echo ""
echo -e "${BLUE}üîß Op»õiuni de configurare:${NC}"
echo "1) Configurare automatƒÉ firewall local"
echo "2) Generare comenzi pentru router port forwarding"
echo "3) Test conectivitate externƒÉ"
echo "4) Configurare SSH tunnel (avansatƒÉ)"
echo "5) Instalare ngrok pentru test rapid"
echo "6) Afi»ôare informa»õii pentru platformƒÉ web"
echo ""

read -p "Alege op»õiunea (1-6): " choice

case $choice in
    1)
        echo -e "${BLUE}üî• Configurare firewall local...${NC}"
        
        # Ubuntu/Debian ufw
        if command -v ufw &> /dev/null; then
            echo "üì¶ Configurez ufw..."
            sudo ufw allow 8080/tcp comment "Jetson Flask HTTPS"
            sudo ufw allow 8081/tcp comment "Jetson WebRTC WSS"
            sudo ufw allow 22/tcp comment "SSH"
            sudo ufw --force enable
            echo -e "${GREEN}‚úÖ Firewall configurat cu ufw${NC}"
        
        # RHEL/CentOS firewalld
        elif command -v firewall-cmd &> /dev/null; then
            echo "üì¶ Configurez firewalld..."
            sudo firewall-cmd --permanent --add-port=8080/tcp
            sudo firewall-cmd --permanent --add-port=8081/tcp
            sudo firewall-cmd --reload
            echo -e "${GREEN}‚úÖ Firewall configurat cu firewalld${NC}"
        
        # iptables direct
        else
            echo "üì¶ Configurez iptables..."
            sudo iptables -A INPUT -p tcp --dport 8080 -j ACCEPT
            sudo iptables -A INPUT -p tcp --dport 8081 -j ACCEPT
            
            # Salvare permanentƒÉ (Ubuntu/Debian)
            if command -v iptables-save &> /dev/null; then
                sudo iptables-save > /etc/iptables/rules.v4 2>/dev/null || true
            fi
            echo -e "${GREEN}‚úÖ Firewall configurat cu iptables${NC}"
        fi
        ;;
        
    2)
        echo -e "${BLUE}üåê Configurare router port forwarding...${NC}"
        echo ""
        echo "üìã AdaugƒÉ aceste reguli √Æn routerul tƒÉu:"
        echo ""
        echo -e "${YELLOW}Regula 1 - Flask HTTPS:${NC}"
        echo "   Service Name: Jetson-HTTPS"
        echo "   External Port: 8080"
        echo "   Internal IP: $LOCAL_IP"
        echo "   Internal Port: 8080"
        echo "   Protocol: TCP"
        echo ""
        echo -e "${YELLOW}Regula 2 - WebRTC WSS:${NC}"
        echo "   Service Name: Jetson-WSS"  
        echo "   External Port: 8081"
        echo "   Internal IP: $LOCAL_IP"
        echo "   Internal Port: 8081"
        echo "   Protocol: TCP"
        echo ""
        echo -e "${BLUE}üì± Acces router:${NC}"
        echo "   üåê URL Router: http://$GATEWAY"
        echo "   üìñ CautƒÉ sec»õiunea: 'Port Forwarding' sau 'Virtual Server'"
        echo ""
        echo -e "${GREEN}üéØ DupƒÉ configurare, serverul va fi accesibil la:${NC}"
        echo "   https://$PUBLIC_IP:8080 (Flask API)"
        echo "   wss://$PUBLIC_IP:8081 (WebRTC)"
        ;;
        
    3)
        echo -e "${BLUE}üß™ Test conectivitate externƒÉ...${NC}"
        
        # Test conectivitate internet
        echo "üåç Test conectivitate internet..."
        if ping -c 3 8.8.8.8 > /dev/null 2>&1; then
            echo -e "   ‚úÖ ${GREEN}Internet OK${NC}"
        else
            echo -e "   ‚ùå ${RED}Internet FAILED${NC}"
        fi
        
        # Test DNS
        echo "üîç Test DNS..."
        if nslookup google.com > /dev/null 2>&1; then
            echo -e "   ‚úÖ ${GREEN}DNS OK${NC}"
        else
            echo -e "   ‚ùå ${RED}DNS FAILED${NC}"
        fi
        
        # Test port extern (dacƒÉ serverul ruleazƒÉ)
        echo "üîå Test porturi locale..."
        if curl -k -s --connect-timeout 5 https://localhost:8080/ping > /dev/null 2>&1; then
            echo -e "   ‚úÖ ${GREEN}Server local OK${NC}"
        else
            echo -e "   ‚ùå ${RED}Server local nu rƒÉspunde${NC}"
            echo "   üí° Porne»ôte serverul cu: python3 server_ip_camera.py"
        fi
        ;;
        
    4)
        echo -e "${BLUE}üöá Configurare SSH tunnel...${NC}"
        echo ""
        echo "üìã Pentru acces temporar prin SSH tunnel:"
        echo ""
        echo -e "${YELLOW}Pe computer local:${NC}"
        echo "ssh -L 8080:localhost:8080 -L 8081:localhost:8081 user@$PUBLIC_IP"
        echo ""
        echo -e "${YELLOW}Apoi acceseazƒÉ:${NC}"
        echo "https://localhost:8080 (redirect la Jetson)"
        echo ""
        echo -e "${BLUE}Pentru tunnel permanent:${NC}"
        echo "ssh -f -N -L 8080:localhost:8080 -L 8081:localhost:8081 user@$PUBLIC_IP"
        ;;
        
    5)
        echo -e "${BLUE}üì° Instalare ngrok pentru test rapid...${NC}"
        
        # VerificƒÉ dacƒÉ ngrok e instalat
        if command -v ngrok &> /dev/null; then
            echo -e "${GREEN}‚úÖ ngrok deja instalat${NC}"
        else
            echo "üì¶ Instalez ngrok..."
            
            # Download ngrok
            if [[ "$OSTYPE" == "linux"* ]]; then
                if [[ "$(uname -m)" == "aarch64" ]]; then
                    # ARM64 pentru Jetson
                    wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-arm64.tgz
                    tar xzf ngrok-v3-stable-linux-arm64.tgz
                else
                    # x86_64
                    wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
                    tar xzf ngrok-v3-stable-linux-amd64.tgz
                fi
                sudo mv ngrok /usr/local/bin/
                rm -f ngrok-v3-stable-linux-*.tgz
                echo -e "${GREEN}‚úÖ ngrok instalat${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è InstaleazƒÉ manual ngrok de la https://ngrok.com/download${NC}"
            fi
        fi
        
        echo ""
        echo -e "${BLUE}üöÄ Comenzi ngrok pentru test:${NC}"
        echo ""
        echo -e "${YELLOW}Terminal 1 - Porne»ôte serverul:${NC}"
        echo "python3 server_ip_camera.py"
        echo ""
        echo -e "${YELLOW}Terminal 2 - Tunnel HTTPS:${NC}"
        echo "ngrok http 8080"
        echo ""
        echo -e "${YELLOW}Terminal 3 - Tunnel WSS:${NC}"  
        echo "ngrok http 8081"
        echo ""
        echo "üí° ngrok va afi»ôa URL-uri publice temporare pentru test"
        ;;
        
    6)
        echo -e "${BLUE}üì± Informa»õii pentru platformƒÉ web...${NC}"
        echo ""
        echo -e "${GREEN}üîó URL-uri de test:${NC}"
        echo ""
        if [ "$PUBLIC_IP" != "Nu se poate ob»õine" ]; then
            echo -e "${YELLOW}Acces direct (dupƒÉ port forwarding):${NC}"
            echo "   API: https://$PUBLIC_IP:8080"
            echo "   Test: https://$PUBLIC_IP:8080/test-connection"
            echo "   WebRTC: wss://$PUBLIC_IP:8081"
        fi
        echo ""
        echo -e "${YELLOW}Acces local (pentru test):${NC}"
        echo "   API: https://$LOCAL_IP:8080"
        echo "   Test: https://$LOCAL_IP:8080/test-connection"
        echo "   WebRTC: wss://$LOCAL_IP:8081"
        echo ""
        echo -e "${GREEN}üìã Cod JavaScript pentru platformƒÉ:${NC}"
        echo ""
        cat << 'EOF'
// Test conexiune Jetson
async function testJetsonConnection(jetsonUrl) {
    try {
        const response = await fetch(`${jetsonUrl}/test-connection`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            return {
                online: true,
                status: data.overall_status,
                message: data.message,
                local_ip: data.server_info?.local_ip,
                cameras: data.test_details?.camera_discovery?.cameras_found || 0
            };
        }
        return { online: false, error: 'HTTP Error' };
    } catch (error) {
        return { online: false, error: error.message };
    }
}

// Utilizare:
testJetsonConnection('https://YOUR_IP:8080').then(result => {
    console.log('Jetson status:', result);
});
EOF
        ;;
        
    *)
        echo -e "${RED}‚ùå Op»õiune invalidƒÉ${NC}"
        exit 1
        ;;
esac

echo ""
echo -e "${GREEN}‚ú® Configurare completƒÉ!${NC}"
echo ""
echo -e "${BLUE}üìã Next steps:${NC}"
echo "1. Porne»ôte serverul: python3 server_ip_camera.py"
echo "2. TesteazƒÉ local: curl -k https://$LOCAL_IP:8080/ping"
if [ "$PUBLIC_IP" != "Nu se poate ob»õine" ]; then
    echo "3. TesteazƒÉ extern: curl -k https://$PUBLIC_IP:8080/ping"
fi
echo "4. IntegreazƒÉ √Æn platformƒÉ cu URL-urile afi»ôate"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è Important:${NC}"
echo "- Pentru HTTPS trebuie sƒÉ accep»õi certificatul self-signed √Æn browser"
echo "- Pentru produc»õie, folose»ôte certificat SSL valid"
echo "- ConfigureazƒÉ firewall »ôi router dupƒÉ nevoie"
